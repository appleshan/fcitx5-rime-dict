# default.custom.yaml
#
# 位置：
# ~/.local/share/fcitx5/rime  (Linux)
#
# 於重新部署後生效
#

# @See https://sh.alynx.one/posts/My-RIME/
# @See https://github.com/iDvel/rime-settings/
# 按键速查在最下面

patch:
  # 方案列表
  schema_list:
  - schema: rime_ice               # 雾凇拼音（全拼）
  - schema: double_pinyin_mspy     # 微软双拼

  # 候选词数量
  menu/page_size: 9

  switcher:
    # 呼出方案选单
    caption: "〔方案选单〕"
    # 用半角斜线而不是奇丑无比的全角斜线做分隔符。
    option_list_separator: "/"
    # 切换方案、简繁、全半角的快捷键
    hotkeys:
      # ~ # 把其他都注释掉，或只留一个波浪号，可以将快捷键置空。
      - F4
      - Control+grave # control + `
      # - Control+Shift+grave

  # 下面设置的整体效果：不用 CapsLock 和 Shift 切换输入法，切换输入法使用系统快捷键，如 Ctrl/Cmd + 空格
  ascii_composer:
    good_old_caps_lock: true # true | false , Caps 切换大小写或切换中英

    switch_key:
      # `inline_ascii` 在输入框内插入英文。
      # `commit_text` 候选文字上屏并切换至英文。
      # `commit_code` 输入拼音上屏并切换至英文。
      # `clear` 清除拼音并切换至英文。
      # `noop` 屏蔽此按键。
      Caps_Lock: commit_text # commit_code | commit_text
      # 打字打到一半时按下了 Caps 后： commit_code 上屏拼音的英文字母 | commit_text 上屏拼音拼出的词语
      # 如果你设置 `Caps_Lock` 为 `noop`，一个奇怪的问题是退格键不能用了，除非取消大写锁定。
      # 所以我直接设置文字上屏了。
      Shift_L: noop # noop | commit_code ，是否用 Shift 切换中英文
      Shift_R: noop
      Control_L: noop
      Control_R: noop

  key_binder:
    bindings:
      # 以下复制于： https://github.com/rime/rime-prelude/blob/master/key_bindings.yaml

      # Emacs 键位，我喜欢。
      # - { when: composing, accept: Control+p, send: Up }
      # - { when: composing, accept: Control+n, send: Down }
      # - { when: composing, accept: Control+b, send: Left }
      # - { when: composing, accept: Control+f, send: Right }
      - { when: composing, accept: Control+a, send: Home } # 光标跳转至行首
      - { when: composing, accept: Control+e, send: End }  # 光标跳转至行尾
      # - { when: composing, accept: Control+d, send: Delete }
      # - { when: composing, accept: Control+k, send: Shift+Delete }
      # - { when: composing, accept: Control+h, send: BackSpace }
      # - { when: composing, accept: Control+g, send: Escape }
      # - { when: composing, accept: Control+bracketleft, send: Escape }
      # - { when: composing, accept: Control+y, send: Page_Up }
      # - { when: composing, accept: Alt+v, send: Page_Up }
      # - { when: composing, accept: Control+v, send: Page_Down }

      # - { when: has_menu, accept: comma, send: 2 }  # 候选2 用逗号选择 （修改的时候不要多加或少加空格，跟前面的对齐就好了）
      # - { when: has_menu, accept: period, send: 3 } # 候选3 用句号选择
      - { when: has_menu, accept: semicolon, send: 2 }  # 候选2 用分号
      - { when: has_menu, accept: apostrophe, send: 3 } # 候选3 用单引号

      # 正常人不会用 Tab 切换拼音光标的，相信我。用它切换选项更快。
      # move_by_word_with_tab: Tab/Shift+Tab 切换光标至下/上一个拼音
      # - { when: composing, accept: ISO_Left_Tab, send: Shift+Left }
      # - { when: composing, accept: Shift+Tab, send: Shift+Left }
      # - { when: composing, accept: Tab, send: Shift+Right }
      - { when: has_menu,  accept: Tab, send: Down }
      - { when: has_menu,  accept: ISO_Left_Tab, send: Up }

      # paging_with_minus_equal: 翻页：- =
      - { when: has_menu, accept: minus, send: Page_Up }
      - { when: has_menu, accept: equal, send: Page_Down }

      # 我觉得正常人不应该用逗号和句号翻页。
      # paging_with_comma_period: 翻页：, .
      # - { when: paging, accept: comma, send: Page_Up }
      # - { when: has_menu, accept: period, send: Page_Down }

      # paging_with_brackets: 翻页：[ ]
      # - { when: paging, accept: bracketleft, send: Page_Up }
      # - { when: has_menu, accept: bracketright, send: Page_Down }

      # 鬼才记得住这么多乱七八糟的快捷键，我翻菜单比背这玩意快多了。
      # numbered_mode_switch:
      # - { when: always, accept: Control+Shift+1, select: .next }
      # - { when: always, accept: Control+Shift+2, toggle: ascii_mode }
      # - { when: always, accept: Control+Shift+3, toggle: full_shape }
      # - { when: always, accept: Control+Shift+4, toggle: simplification }
      # - { when: always, accept: Control+Shift+5, toggle: extended_charset }
      # - { when: always, accept: Control+Shift+exclam, select: .next }
      # - { when: always, accept: Control+Shift+at, toggle: ascii_mode }
      # - { when: always, accept: Control+Shift+numbersign, toggle: full_shape }
      # - { when: always, accept: Control+Shift+dollar, toggle: simplification }
      # - { when: always, accept: Control+Shift+percent, toggle: extended_charset }

      # 你就是那个经常害我变成全角的罪魁祸首！
      # windows_compatible_mode_switch:
      # - { when: always, accept: Shift+space, toggle: full_shape }
      # - { when: always, accept: Control+period, toggle: ascii_punct }

      # optimized_mode_switch:
      # - { when: always, accept: Control+Shift+space, select: .next }
      # - { when: always, accept: Shift+space, toggle: ascii_mode }
      # - { when: always, accept: Control+comma, toggle: full_shape }
      # - { when: always, accept: Control+period, toggle: ascii_punct }
      # - { when: always, accept: Control+slash, toggle: simplification }
      # - { when: always, accept: Control+backslash, toggle: extended_charset }

# 按键速查：
# （没有 Command 键，不支持）
# BackSpace	退格
# Tab	水平定位符
# Linefeed	换行
# Clear	清除
# Return	回車
# Pause	暫停
# Sys_Req	印屏
# Escape	退出
# Delete	刪除
# Home	原位
# Left	左箭頭
# Up	上箭頭
# Right	右箭頭
# Down	下箭頭
# Prior、Page_Up	上翻
# Next、Page_Down	下翻
# End	末位
# Begin	始位
# Shift_L	左Shift
# Shift_R	右Shift
# Control_L	左Ctrl
# Control_R	右Ctrl
# Meta_L	左Meta
# Meta_R	右Meta
# Alt_L	左Alt
# Alt_R	右Alt
# Super_L	左Super
# Super_R	右Super
# Hyper_L	左Hyper
# Hyper_R	右Hyper
# Caps_Lock	大寫鎖
# Shift_Lock	上檔鎖
# Scroll_Lock	滾動鎖
# Num_Lock	小鍵板鎖
# Select	選定
# Print	列印
# Execute	執行
# Insert	插入
# Undo	還原
# Redo	重做
# Menu	菜單
# Find	蒐尋
# Cancel	取消
# Help	幫助
# Break	中斷
# space
# exclam	!
# quotedbl	"
# numbersign	#
# dollar	$
# percent	%
# ampersand	&
# apostrophe	'
# parenleft	(
# parenright	)
# asterisk	*
# plus	+
# comma	,
# minus	-
# period	.
# slash	/
# colon	:
# semicolon	;
# less	<
# equal	=
# greater	>
# question	?
# at	@
# bracketleft	[
# backslash	
# bracketright	]
# asciicircum	^
# underscore	_
# grave	`
# braceleft	{
# bar	|
# braceright	}
# asciitilde	~
# KP_Space	小鍵板空格
# KP_Tab	小鍵板水平定位符
# KP_Enter	小鍵板回車
# KP_Delete	小鍵板刪除
# KP_Home	小鍵板原位
# KP_Left	小鍵板左箭頭
# KP_Up	小鍵板上箭頭
# KP_Right	小鍵板右箭頭
# KP_Down	小鍵板下箭頭
# KP_Prior、KP_Page_Up	小鍵板上翻
# KP_Next、KP_Page_Down	小鍵板下翻
# KP_End	小鍵板末位
# KP_Begin	小鍵板始位
# KP_Insert	小鍵板插入
# KP_Equal	小鍵板等於
# KP_Multiply	小鍵板乘號
# KP_Add	小鍵板加號
# KP_Subtract	小鍵板減號
# KP_Divide	小鍵板除號
# KP_Decimal	小鍵板小數點
# KP_0	小鍵板0
# KP_1	小鍵板1
# KP_2	小鍵板2
# KP_3	小鍵板3
# KP_4	小鍵板4
# KP_5	小鍵板5
# KP_6	小鍵板6
# KP_7	小鍵板7
# KP_8	小鍵板8
# KP_9	小鍵板9
